#그래프 탐색 알고리즘

- 탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 말함
- 대표적인 그래프 탐색 알고리즘으로 DFS, BFS가 있음
- 코테에서 매우 자주 등장하는 유형, 반드시 숙지

#스택 자료구조

- 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출)의 자료구조
- 입구와 출구가 동일한 형태로 스택을 시각화 -> 박스쌓기
- append()함수와 pop 함수의 시간 복잡도는 상수시간 O(1)

stack=[]
stack.append(5)
stack.pop()
print(stack[::-1]) # 최상단 원소부터 출력
print(stack)      # 최하단 원소부터 출력

#큐 자료구조

- 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출)의 자료구조
- 큐는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태로 시각화
- list로도 구현할 수 있지만 위치 조정을 해줘야 하기 때문에 시간 복잡도가 높아짐
- 상수시간 복잡도

from collections import deque

queue = deque()
queue.append(5)
queue.popleft()
print(queue)    # 먼저 들어온 순서대로 출력
queue.reverse() # 역순으로 바꾸기
print(queue)    # 나중에 들어온 원소부터 출력

#재귀 함수

- 자기 자신을 다시 호출하는 함수를 의미
- 재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수의 종료 조건을 반드시 명시해야 함 -> 무한루프 방지
- 팩토리얼 구현 -> 좀 더 직관적 cf) 0!,1!=1
- 최대 공약수 계산(유클리드 호제법)
    - 두 자연수 A, B (A>B)에 대하여 A를 B로 나눈 나머지를 R이라고 하자
    - 이 때 A와 B의 최대 공약수는 B와 R의 최대 공약수와 같다.

    def gcd(a,b):
        if a%b == 0:
            return b
        else:
            return gcd(b,a%b)

- 재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성 -> 이해가 어려울 수도 있으니 신중하게 사용
- 모든 재귀함수는 반복물을 이용하여 동일한 기능을 구현
- 재귀함수가 반복문 보다 유리한 경우도 있고 불리한 경우도 있음
- 컴퓨터가 함수를 연속적으로 호출시 컴퓨터 메모리 내부의 스택 프레임에 쌓임 -> 스택 사용시 구현상 스택 라이브러리 대신 재귀 함수 이용 경우 존재

#DFS(Depth-First Search)

- DFS는 깊이 우선 탐색이라고도 부르며 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘
- DFS는 스택 자료구조(혹은 재귀 함수)를 이용하며, 구체적인 동작은 다음과 같은
    1) 탐색 시작 노드를 스택에 삽입하고 방문 처리를 함
    2) 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 그 노드를 스택에 넣고 방문 처리,
       방문하지 않은 인접한 노드가 없으면 스택에서 최상단 노드를 꺼냄.
    3) 더 이상 2번의 과정을 수행할 수 없을 때까지 반복

#BFS(Breadth-First Search)

- BFS는 너비 우선 탐색이라고도 부르며, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘
- 최단 거리 문제에서 자주 활용
- BFS는 큐 자료구조를 이용하며 구체적인 동작 과정은 다음과 같음
    1) 탐색 시작 노드를 큐에 삽입하고 방문 처리를 함
    2) 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리
    3) 더 이상 2번의 과정을 수행할 수 없을 때까지 반복

#소스코드 예시

from collections import deque
# 각 노드가 연결된 정보를 표현(
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

visited = [False] * 9

def dfs(graph, v, visited):

    visited[v]=True
    print(v, end=" ")

    for i in graph[v]:
        if not visited[i]:
            dfs(graph,i,visited)

def bfs(graph, start, visited):

    queue = deque([start])
    visited[start] = True       #현재 노드를 방문 처리

    while queue:
        v=queue.popleft()       #큐에서 하나의 원소를 뽑아 출력
        print(v, end=" ")

        for i in graph[v]:      #아직 방문하지 않은 인접한 원소들은 큐에 삽입
            if not visited[i]:
                queue.append(i)
                visited[i] = True

dfs(graph,1,visited) or bfs(graph,1,visited)

