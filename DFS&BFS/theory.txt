#그래프 탐색 알고리즘: DFS/BFS

- 탐색이란 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 말함
- 대표적인 그래프 탐색 알고리즘으로 DFS, BFS가 있음
- 코테에서 매우 자주 등장하는 유형, 반드시 숙지

#스택 자료구조

- 먼저 들어 온 데이터가 나중에 나가는 형식(선입후출)의 자료구조
- 입구와 출구가 동일한 형태로 스택을 시각화 -> 박스쌓기
- append()함수와 pop 함수의 시간 복잡도는 상수시간 O(1)

stack=[]
stack.append(5)
stack.pop()
print(stack[::-1]) # 최상단 원소부터 출력
print(stack)      # 최하단 원소부터 출력

#큐 자료구조

- 먼저 들어 온 데이터가 먼저 나가는 형식(선입선출)의 자료구조
- 큐는 입구와 출구가 모두 뚫려 있는 터널과 같은 형태로 시각화
- list로도 구현할 수 있지만 위치 조정을 해줘야 하기 때문에 시간 복잡도가 높아짐
- 상수시간 복잡도

from collections import deque

queue = deque()
queue.append(5)
queue.popleft()
print(queue)    # 먼저 들어온 순서대로 출력
queue.reverse() # 역순으로 바꾸기
print(queue)    # 나중에 들어온 원소부터 출력

#재귀 함수

- 자기 자신을 다시 호출하는 함수를 의미
- 재귀 함수를 문제 풀이에서 사용할 때는 재귀 함수의 종료 조건을 반드시 명시해야 함 -> 무한루프 방지
- 팩토리얼 구현 -> 좀 더 직관적 cf) 0!,1!=1
- 최대 공약수 계산(유클리드 호제법)
    - 두 자연수 A, B (A>B)에 대하여 A를 B로 나눈 나머지를 R이라고 하자
    - 이 때 A와 B의 최대 공약수는 B와 R의 최대 공약수와 같다.

    def gcd(a,b):
        if a%b == 0:
            return b
        else:
            return gcd(b,a%b)

- 재귀 함수를 잘 활용하면 복잡한 알고리즘을 간결하게 작성 -> 이해가 어려울 수도 있으니 신중하게 사용
- 모든 재귀함수는 반복물을 이용하여 동일한 기능을 구현
- 재귀함수가 반복문 보다 유리한 경우도 있고 불리한 경우도 있음
- 컴퓨터가 함수를 연속적으로 호출시 컴퓨터 메모리 내부의 스택 프레임에 쌓임 -> 스택 사용시 구현상 스택 라이브러리 대신 재귀 함수 이용 경우 존재
