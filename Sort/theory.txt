# 정렬 알고리즘

- 정렬이란 데이터를 특정한 기준에 따라 순서대로 나열하는 것을 말함
- 일반적으로 문제 상황에 따라서 적절한 정렬 알고리즘이 공식처럼 사용됨

#선택 정렬
- 처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복
- 시간복잡도 : O(N^2)
    - 선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 함
    - 구현 방식에 따라 오차 존재, 전체 연산 횐수 -> N + (N-1) + (N-2) ..... +2
    - 이는 (N^2+N-2)/2로 표현, 빅오 표기법에 따라서 O(N^2)

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i  # 가장 작은 원소의 인덱스
    for j in range(i + 1, len(array)):      #선형 탐색을 수행
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i]     #스와프
print(array)

#삽입 정렬
- 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입
- 선택 정렬에 비해 구현 난이도가 높지만, 일반적으로 더 효율
- 시간복잡도 : O(N^2)
    - 선택 정렬과 마찬가지로 반복문이 2번 중첩
    - 현재 리스트가 거의 정렬된 상태라면 매우 빠르게 동작 -> 최선의 경우 O(N)

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1):       #인덱스 i부터 1까지 1씩 감소하면서 반복
        if array[j] < array[j-1]:   #한 칸씩 왼쪽으로 이동
            array[j], array[j - 1] = array[j-1], array[j]
        else:       #자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break
print(array)

# 퀵 정렬
- 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법
- 일반적인 상황에서 가장 많이 사용되는 정렬 알고리즘 중 하나
- 병합 정렬과 더불어 대부분의 프로그래밍 언어의 정렬 라이브러리의 근간이 됨
- 가장 기본적인 퀵정렬은 첫 번째 데이터를 기준 데이터(Pivot)으로 설정
    1) 왼쪽에서부터 피벗값보다 큰 데이터를 고르고, 오른쪽에서부터는 피벗값보다 작은 데이터를 고르고 둘 위치를 바꿔줌
    2) 왼쪽에서 피벗값보다 작은 데이터, 오른쪽에서 피벗값보다 큰 데이터를 골라 위치가 엇갈리는 경우 피벗과 작은 데이터의 위치를 서로 변경
    3) 피벗의 왼쪽 데이터는 모두 피벗값보다 작고, 피벗의 오른쪽 데이터는 모두 피벗값보다 크다. 피벗을 기준으로 묶음을 나누는 작업을 분할
    4) 왼쪽의 데이터에 대해서 다시 한 번 퀵정렬, 오른쪽 데이터에 대해서도 다시 한 번 퀵정렬 -> 재귀적으로 반복 수행
- 이상적인 경우 분할이 절반씩 일어난다면 전체 연산 횟수로 O(NlogN)을 기대 -> 평균적, 최악의 경우(이미 정렬된 배열) : O(N^2)의 시간복잡도

array = [5,7,9,0,3,1,6,2,4,8]

def quick_sort(array, start, end):
    if start >= end:        #원소가 1개인 경우 종료
        return
    pivot = start           #피벗은 첫 번째 원소
    left = start+1
    right = end

    while(left <= right):
        while(left<=end and array[left]<=array[pivot]):     #피벗보다 큰 데이터를 찾을 때까지 반복
            left += 1
        while(right>start and array[right]>=array[pivot]):  #피벗보다 작은 데이터를 찾을 때까지 반복
            right -= 1
        if(left>right):     #엇갈렸다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        else:       #엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    #분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right-1)
    quick_sort(array, right+1, end)

quick_sort(array, 0, len(array)-1)
print(array)

# 파이썬의 장접을 살린 퀵정렬

def quick_sort(array):
    # 리스트가 하나 이하의 원소만을 담고 있다면 종료
    if len(array) <= 1:
        return array

    pivot = array[0] # 피벗은 첫 번째 원소
    tail = array[1:] # 피벗을 제외한 리스트

    left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
    right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트를 반환
    return quick_sort(left_side) + [pivot] + quick_sort(right_side)

print(quick_sort(array))


#계수 정렬
- 특정한 조건이 부합할 때만 사용할 수 있지만, 매우 빠르게 동작하는 정렬 알고리즘
- 계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능
- 데이터의 개수가 N, 데이터(양수)중 최대 값이 k일 때 최악의 경우에도 수행시간이 O(N+K)를 보장
    1) 가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트를 생성
    2) 데이터를 하나씩 확인하며 데이터의 값과 동일한 인덱스의 데이터를 1씩 증가시킴
    3) 결과적으로 최종 리스트에는 각 데이터가 몇 번씩 등장했는지 그 횟수가 기록
    4) 결과를 확인할 때는 리스트의 첫 번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력
- 계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N+K)
- 계수 정렬은 때에 따라서 심각한 비효율성 초래 -> 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용

array = [7,5,9,0,3,1,6,2,9,1,4,8,0,5,2]     #모든 원소의 값이 0보다 크거나 같다고 가정
count = [0]*(max(array)+1)                  #모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)

for i in range(len(array)):
    count[array[i]]+=1      #각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)):     #리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i,end=" ")        #띄어쓰기를 구분으로 등장한 횟수만크 인덱스 출력


정렬 알고리즘     평균 시간 복잡도       공간 복잡도     특징
 선택 정렬           O(N^2)             O(N)        아이디어가 매우 간단
 삽입 정렬           O(N^2)             O(N)        데이터가 거의 정렬되어 있을 때 가장 빠름
  퀵 정렬           O(NlongN)          O(N)        대부분의 경우에 가장 적함, 충분히 빠름
 계수 정렬           O(N+K)             O(N+K)      데이터의 크기가 한정되어 있는 경우에만 사용가능, 매우 빠름
